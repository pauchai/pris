<?php

/**
 * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2015 - 2019
 * @package yii2-date-range
 * @version 1.7.1
 */

namespace vova07\base\components;

use yii\base\Model;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\base\InvalidValueException;


class DateRangeBehavior extends \kartik\daterange\DateRangeBehavior
{
    private $_rangeValue;
    public $displayFormat;

    public function events()
    {
        return [
            Model::EVENT_BEFORE_VALIDATE => 'afterValidate',
        ];
    }

    public function __get($name)
    {
        if ($name === $this->attribute){
            return  $this->getRangeValue();
        } else {
            parent::__get($name);
        }


    }

    public function __set($name, $value)
    {
        if ($name === $this->attribute){
            $this->setRangeValue($value);
        } else {
            parent::__set($name, $value);
        }

    }
    protected function getRangeValue()
    {
        $startAttribute =$this->dateStartAttribute;
        $endAttribute =$this->dateEndAttribute;
        $attribute = $this->attribute;

        if ($this->_rangeValue === null) {
            $dateTime = new \DateTime();
            $currentYear = $dateTime->format('Y');
            $currentMonth = $dateTime->format('m');
            $firstMonthDay = 1;
            $lastMonthDay = $dateTime->format('t');

            if (is_null($this->owner->$startAttribute)){
                $startDateTime = (new \DateTime())->setDate($currentYear,$currentMonth,$firstMonthDay);
                $this->owner->$startAttribute = $startDateTime->getTimestamp();
            } else {
                $startDateTime = (new \DateTime)->setTimestamp($this->owner->$startAttribute);
            }
            if (is_null($this->owner->$endAttribute)){
                $endDateTime = (new \DateTime())->setDate($currentYear,$currentMonth,$lastMonthDay);
                $this->owner->$endAttribute = $endDateTime->getTimestamp();
            } else {
                $endDateTime = (new \DateTime)->setTimestamp($this->owner->$endAttribute);
            }

            $this->_rangeValue =  $startDateTime->format($this->displayFormat). ($this->separator??' - ') . $endDateTime->format($this->displayFormat);
        }
        return $this->_rangeValue;
    }

    /**
     * Set jui created date
     */
    protected function setRangeValue($value)
    {
        $this->_rangeValue = $value;
    }

    public function canGetProperty($name, $checkVars = true)
    {
        return $name === $this->attribute;
    }
    public function canSetProperty($name, $checkVars = true)
    {
        return $name === $this->attribute;
    }

    public function afterValidate($event)
    {
        if ($this->owner->hasErrors() || !($event->name == Model::EVENT_AFTER_VALIDATE || $event->name == Model::EVENT_BEFORE_VALIDATE)) {
            return;
        }
        $dateRangeValue = $this->owner->{$this->attribute};
        if (empty($dateRangeValue)) {
            return;
        }
        if ($this->singleDate) {
            $this->setOwnerAttribute($this->dateAttribute, $this->dateFormat, $dateRangeValue);
        } else {
            $separator = empty($this->separator) ? ' - ' : $this->separator;
            $dates = explode($separator, $dateRangeValue, 2);
            if (count($dates) !== 2) {
                throw new InvalidValueException("Invalid date range: '{$dateRangeValue}'.");
            }
            $this->setOwnerAttribute($this->dateStartAttribute, $this->dateStartFormat, $dates[0]);
            $this->setOwnerAttribute($this->dateEndAttribute, $this->dateEndFormat, $dates[1]);
        }
    }
    protected function setOwnerAttribute($attribute, $dateFormat, $date)
    {
        if ($dateFormat === false) {
            $this->owner->$attribute = $date;
        } else {
            $timestamp = static::dateToTime($date, $this->displayFormat);
            if ($dateFormat === null) {
                $this->owner->$attribute = $timestamp;
            } else {
                $this->owner->$attribute = $timestamp !== false ? date($dateFormat, $timestamp) : false;
            }
        }
    }

    protected static function dateToTime($date, $format)
    {
        //return strtotime($date);
        return \DateTime::createFromFormat($format, $date)->getTimestamp();
    }

}
